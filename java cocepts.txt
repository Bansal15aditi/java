/*class Shape{
    String color;
}
class Triangle extends Shape{
    
}
public class Main{
    public static void main(String[] args){
        Triangle t1=new Triangle();
        t1.color="red";
        System.out.println(t1.color);
    }
}
class Parent{
    String color;
    String name;
}
class Child extends Parent{
    int age;
    
}
public class Main{
    public static void main(String[] args){
        Child c1=new Child();
        c1.color="fair";
        c1.age=10;
        System.out.println(c1.color);
        System.out.println(c1.age);
        
    }
}
// single level inheritance
class Animal{
    String type;
    public void eat()
    { 
       System.out.println("eating");
    }
}
class Dog extends Animal{
    public void bark()
    {
        System.out.println("barking");
    }
}
public class Main{
    public static void main(String[] args){
        Dog d1=new Dog();
        d1.type="no wings";
        System.out.println(d1.type);
        d1.eat();
        d1.bark();
    }
}
// multilevel inheritence
class Animals{
    String type;
    public void display()
    {
        System.out.println("display properties of dog");
    }
}
class Dog extends Animals{
    String eattype;
    public void bark()
    {
        System.out.println("barking");    
    }
}
class BabyDog extends Dog{
    public void weep()
    {
        System.out.println("weeping");   
    }
}
public class Main{
    public static void main(String[] args){
        BabyDog b1=new BabyDog();
        b1.display();
        b1.type="no wings";
        b1.eattype="bones eating";
        System.out.println(b1.type);
        System.out.println(b1.eattype);
        b1.bark();
        b1.weep();
    }
}
//hierarchial inheritence
class Animal{
    public void Display(){
        System.out.println("display");
    }
}
class Dog extends Animal{
    public void bark()
    {
        System.out.println("barking");
    }
}
class Cat extends Animal{
    public void  meow(){
        System.out.println("meowing");
    }
}
public class Main{
    public static void main(String[] args){
        Cat c=new Cat();
        c.Display();
        c.meow();
        // c.bark();
    }
}
class Parent{
    public void Display()
    {
        System.out.println("parent watch movies");
    }
}
class Child extends Parent{
    public void display()
    {
        System.out.println("child watch cartoons");
    }
}
public class Main{
    public static void main(String[] args){
        Child c1=new Child();
        c1.Display();
        c1.display();
    }
}
//ABSTRACTION CONCEPT 
abstract class Animal{
    abstract public void Display();
    public void Type()
    {
        System.out.println("animal type");
    }
}
class Dog extends Animal{
    public void Display()
    {
        System.out.println("display");
    }
}
public class Main{
    public static void main(String[] args)
    {
        Dog d1=new Dog();
        d1.Type();
        d1.bark();
        d1.Display();
    }
}*/
abstract class Animal{
    abstract public void sound();
    public void sleep()
    {
        System.out.println("sleeping");
    }
}
class Dog extends Animal{
    public void sound()
    {
        System.out.println("sound producing");
    }
    public void bark(){
        System.out.println("barking");
    }
}
public class Main{
    public static void main(String[] args)
    {
        Dog d1=new Dog();
        d1.bark();
        d1.sleep();
    }
}
abstract class Animal{
    abstract void display();
    {
        System.out.println("display");
    }
    public void eat()
    {
        System.out.println("eating");
    }
}
class Cat extends Animal{
    public void display()
    {
        System.out.println("animal display");
    }
    public void sleep()
    {
        System.out.println("sleeping");
    }
}
public class MyClass{
    public static void main(String[] args)
    {
        Cat c1=new Cat();
        c1.display();
        c1.eat();
        c1.sleep();
    }
}
public class MyClass{
    public static void main(String[] args){
        float a=10.98f;
        int b=(int)a;
        System.out.println(b);
    }
}
class Student{
    int id;
    String name;
    Student()
    {
        System.out.println("default constructor called");
    }
    Student(int i,String n)
    {
        id=i;
        name=n;
    }
}
public class MyClass{
    public static void main(String[] args){
        Student s1=new Student();
        Student s2=new Student(10,"aditi");
        System.out.println(s2.id+s2.name);
    }
}
//method overloading 
class PrintNumber{
    int x;
    public void PrintInfo()
    {
        System.out.println("no argument");    
    }
    public void PrintInfo(int x)
    {
        System.out.println("integer number");
    }
}
public class MyClass{
    public static void main(String[] args)
    {
        PrintNumber p1=new PrintNumber();
        p1.PrintInfo();
        p1.PrintInfo(5);
    }
}
// super keyword with instance variable
class Animal{
    String color="white";
    
}
class Cat extends Animal{
    String color="brown";
    public void display()
    {
        System.out.println(color);
        System.out.println(super.color);
    }
}
public class MyClass{
    public static void main(String[] args){
        Cat c1=new Cat();
        c1.display();
    }
}
// super keyword with method
class Animal{
    public void walk()
    {
        System.out.println("walking");
    }
}
class Cat extends Animal{
    public void eat()
    {
        System.out.println("eating");
        super.walk();
    }
}
public class MyClass{
    public static void main(String[] args){
        Cat c1=new Cat();
        c1.eat();
    }
}
//super key word with constructor
class Animal{
    Animal()
    {
        System.out.println("animal is created");
    }
}
class Cat extends Animal{
    Cat()
    {
        super();
        System.out.println("cat is created");
    }
}
public class MyClass{
    public static void main(String[] args){
        Cat c1=new Cat();
    }
}*/
// constructor chaining and this keyword
class Number{
    Number()
    {
        this(5);
    }
    Number(int x)
    {
        this(15,5);
    }
    Number(int x,int y)
    {
        System.out.println(x*y);
    }
}
public class MyClass{
    public static void main(String[] args){
        Number num=new Number();
    }
}